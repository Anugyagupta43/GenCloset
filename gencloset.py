# -*- coding: utf-8 -*-
"""GenCloset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OdJM5vHHu06kAvt06YIKhT8j_-omiuUz
"""

import pandas as pd

# Load dataset
df = pd.read_csv("Womens Clothing E-Commerce Reviews.csv")  # Adjust path if needed
df.head()

# Drop unnamed index column if present
df = df.loc[:, ~df.columns.str.contains('^Unnamed')]

# Check nulls
df.isna().sum()

df = df.dropna(subset=['Review Text']).reset_index(drop=True)

df['Title'] = df['Title'].fillna("No Title")

df = df.dropna(subset=['Division Name', 'Department Name', 'Class Name']).reset_index(drop=True)

df.to_csv("cleaned_fashion_reviews.csv", index=False)
print("Saved as cleaned_fashion_reviews.csv")

def generate_description(review_text):
    prompt = f"""
    Rewrite this customer review as a stylish product description for a fashion catalog:

    Review: "{review_text}"

    Product Description:
    """
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
        max_tokens=100
    )
    return response['choices'][0]['message']['content'].strip()

pip install openai==0.28

sample_review = df['Review Text'].iloc[0]
print("Original Review:", sample_review)
print("\nGenerated Description:", generate_description(sample_review))

!pip install transformers torch

from transformers import pipeline

# Load a text-to-text model for rewriting tasks
gen_model = pipeline("text2text-generation", model="google/flan-t5-small")

def local_generate_description(review_text):
    prompt = f"Turn this customer review into a stylish product description: {review_text}"
    result = gen_model(prompt, max_length=100, do_sample=True, temperature=0.7)
    return result[0]['generated_text']

sample_review = df['Review Text'].iloc[0]
print("Original Review:", sample_review)
print("\nGenerated Description:", local_generate_description(sample_review))

def rewrite_as_description(review_text):
    prompt = f"Rewrite this customer review as a stylish fashion product description:\n{review_text}"
    result = gen_model(prompt, max_new_tokens=100, do_sample=True, temperature=0.7)
    return result[0]['generated_text']

def playful_version(review_text):
    prompt = f"Rewrite this review in a fun and playful tone:\n{review_text}"
    result = gen_model(prompt, max_new_tokens=100, do_sample=True, temperature=0.9)
    return result[0]['generated_text']

def formal_version(review_text):
    prompt = f"Rewrite this review using a formal and professional tone:\n{review_text}"
    result = gen_model(prompt, max_new_tokens=100, do_sample=False)
    return result[0]['generated_text']

def suggest_styling_tip(review_text, category="Dresses"):
    prompt = f"""You're a fashion stylist. A customer reviewed a {category}.

Review: "{review_text}"

Based on this, give one stylish tip on how to wear this item:"""
    result = gen_model(prompt, max_new_tokens=60, do_sample=True, temperature=0.8)
    return result[0]['generated_text']

def suggest_occasion(review_text, category="blouse"):
    prompt = f"""You're a fashion expert. Based on the following review of a {category}, suggest one specific occasion where it would be perfect to wear. Be short and direct.

Review: "{review_text}"

Occasion:"""
    result = gen_model(prompt, max_new_tokens=30, do_sample=True, temperature=0.8)
    return result[0]['generated_text']

gen_model = pipeline("text2text-generation", model="google/flan-t5-base")

sample_review = df['Review Text'].iloc[0]
print("ðŸ‘— Description:\n", rewrite_as_description(sample_review))
print("\nðŸ’¬ Playful:\n", playful_version(sample_review))
print("\nðŸ‘  Styling Tip:\n", suggest_styling_tip(sample_review))
print("\nðŸŽ‰ Occasion:\n", suggest_occasion(sample_review))